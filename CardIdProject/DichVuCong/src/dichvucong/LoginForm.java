/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dichvucong;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import javax.swing.JOptionPane;
import java.security.PrivateKey;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.swing.ImageIcon;

/**
 *
 * @author longa
 */
public class LoginForm extends javax.swing.JFrame {
    
    private static final String INS_VERIFY_PIN = "41";
    
    private final static String INS_ONAME ="20";
    private final static String INS_OBIRTH ="21";
    private final static String INS_OADDRESS ="22";
    private final static String INS_OISSUE ="23";
    private final static String INS_OEXP ="24";
    private final static String INS_OCARD_ID ="25";
    private final static String INS_OPIN ="26";
    private final static String INS_OGENDER ="27";

    private static PublicKey publicKey;
    private static PrivateKey privateKey;
    JavaSmartcard javaCard;

    /**
     * Creates new form MainForm
     */
    public LoginForm() {
        initComponents();
        this.handleCode();
        javaCard = new JavaSmartcard();
        SecurityKeyPairGenerator();
        setLocationRelativeTo(null);
    }
    private boolean selectApplet(byte[] apdu)
    {
        boolean isSelected = false;
        try
        {
            javaCard.sendApdu(apdu);
            byte[] data = javaCard.getData();
            
            //this.status_Label.setText(""+Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
            
            isSelected = true;
        } 
        catch (CardException | IllegalArgumentException | NullPointerException ex) 
        {
            JOptionPane.showMessageDialog(this, "Lỗi trong quá trình select Applet\n"+ex.getMessage()+"", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
            isSelected = false;
        }        
        
        return isSelected;
    }
    private String returnData(String string) {
        String t = "";
        String lc ="";
        t = Convert.stringToHex(string);
        lc = Integer.toHexString(string.length());
        if (lc.length()==1){
            lc = "0"+lc;
        }
        return lc+t;
    }
        private String receiveData(String ins,String pin) {
        String command = "00"+ins+"0000";
        String info ="";
        byte[] apdu =JavaSmartcard.hexStringToByteArray(command);
        try {
            javaCard.sendApdu(apdu);
            byte[] data = javaCard.getData();
            if(data.length>0){
                info = AES.decrypt(new String(data,"UTF-8"), pin);
            }
        } catch (CardException | IllegalArgumentException | NullPointerException | UnsupportedEncodingException ex) {
            Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return info;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPin = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnRefresh = new javax.swing.JButton();
        cbbTerminal = new javax.swing.JComboBox<>();
        btnConnect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPinActionPerformed(evt);
            }
        });

        jLabel1.setText("Pin:");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Đăng nhập dịch vụ công");

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        cbbTerminal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Card--" }));
        cbbTerminal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbTerminalActionPerformed(evt);
            }
        });

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRefresh)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(205, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPin)
                            .addComponent(cbbTerminal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(24, 24, 24))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLogin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh)
                    .addComponent(cbbTerminal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(154, 154, 154)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(57, Short.MAX_VALUE)))
        );

        txtPin.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPinActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        String command = "00A4040006112233445500";
        byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
        if(selectApplet(apdu)){
            System.out.println("Applet is selected");
            
            String pin = txtPin.getText().trim();
            if(pin.equals("")){
                JOptionPane.showMessageDialog(null, "Bạn chưa nhập mã pin");
                return;
            }
            
            command = "00"+INS_VERIFY_PIN+"0000"+returnData(pin);
            apdu = JavaSmartcard.hexStringToByteArray(command);
            try {
                javaCard.sendApdu(apdu);
            } catch (CardException | IllegalArgumentException | NullPointerException ex) {
                Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            String sw = Integer.toHexString(javaCard.getStatusWords());
            System.out.println(sw);
            switch(sw){
                case "63c2":
                    JOptionPane.showMessageDialog(null, "Sai mã pin, bạn còn 2 lần nhập");
                    break;
                case "63c1":
                    JOptionPane.showMessageDialog(null, "Sai mã pin, bạn còn 1 lần nhập");
                    break;
                case "63c0":
                    JOptionPane.showMessageDialog(null, "Sai mã pin, thẻ đã bị khoá");
                    break;
                case "9000":
                    Person person = new Person();
                person.setName(receiveData(INS_ONAME, pin));
                //System.out.println(person.getName());
                person.setAddress(receiveData(INS_OADDRESS, pin));
                person.setBirth(receiveData(INS_OBIRTH, pin));
                person.setIssue(receiveData(INS_OISSUE, pin));
                person.setExp(receiveData(INS_OEXP, pin));
                person.setId(receiveData(INS_OCARD_ID, pin));
                switch(receiveData(INS_OGENDER, pin)){
                        case "M":
                            person.setGender("Nam");
                            break;
                        case "F":
                            person.setGender("Nữ");
                            break;
                }
                
                
                //get image
                    List<Byte> imageBytes = new ArrayList<>();
                    //ins 0x02 reset offset output
                    command = "00020000";
                    apdu = JavaSmartcard.hexStringToByteArray(command);
                    try {
                        javaCard.sendApdu(apdu);
                    } catch (CardException | IllegalArgumentException | NullPointerException ex) {
                        Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    //ins 0x01 output
                    command = "00010000";
                    apdu = JavaSmartcard.hexStringToByteArray(command);
                    //System.out.println(""+ JavaSmartcard.htos(apdu));
                    for(int i = 0; i<200;i++){
                        try
                        {
                            javaCard.sendApdu(apdu);
                            byte[] data = javaCard.getData();
                            for(int j =0;j<data.length;j++){
                                if(data[j]!=0x00){
                                    imageBytes.add(data[j]);
                                }
                            }

                        } 
                        catch (CardException | IllegalArgumentException ex) 
                        {
                            JOptionPane.showMessageDialog(this, "Error while tried to send command APDU\n"+ex.getMessage()+"", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    //Convert convert = new Convert();
                    String base64String = Convert.hexToString(imageBytes);
                    byte[] btDataFile;
                    BufferedImage image = null;
                    try {
                        btDataFile = new sun.misc.BASE64Decoder().decodeBuffer(base64String);
                        image = ImageIO.read(new ByteArrayInputStream(btDataFile));
                    } catch (IOException ex) {
                        Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    ImageIcon imageIcon = new ImageIcon(image);
                    
                    person.setImage(imageIcon);
                    
                    this.setVisible(false);
                    new DichVuCong(person).setVisible(true);
                    break;
            }
           
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
       try {
            List<CardTerminal> terminals = javaCard.getTerminals();
                this.cbbTerminal.removeAllItems();                
                for (int i = 0; i < terminals.size(); i++) 
                {
                    this.cbbTerminal.addItem(terminals.get(i).getName());
                }            
        } catch (Exception ex) {
            
            JOptionPane.showMessageDialog(this, "Getting problems while tried to access terminal list\n"+ex.getMessage()+".\nReresh agin or restart", "Coudl not get Terminals", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        if (this.cbbTerminal.getSelectedItem().equals( "--select--"))
        {
            return;
        }
        CardTerminal cardReader = javaCard.getCardReader((String)this.cbbTerminal.getSelectedItem());
        try {
            javaCard.connectToCard(cardReader);
            JOptionPane.showMessageDialog(null, "Kết nối thẻ thành công");
        } catch (CardException e) {
            JOptionPane.showMessageDialog(null, "Kết nối thẻ thất bại");
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void cbbTerminalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbTerminalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbTerminalActionPerformed

    public void handleCode() {
        String randomTxt = "daylachuoingaunhien";
        System.out.println("Random text: " + randomTxt);
        btnLogin.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String pin = txtPin.getText();
                try {
//                    RSA.decrypt(pin, privateKey);
//                    RSA.encrypt(pin, publicKey);

                    // khi click login gui publicKey xuong cho applet.
                    // applet su dung publicKey de ma hoa ma pin cua nguoi dung da duoc luu duoi applet.
                    // sau khi ma hoa song applet gui lai len cho dv cong.
                    // dv cong nhan duoc doan text ma hoa do o day thi thuc hien giai ma no bang privateKey.
                    // giai ma thanh cong se nhan duoc ma pin.
                    // thuc hien so sanh ma pin nguoi dung nhap voi ma pin vua giai ma duoc.
                    // neu thanh cong thi cho phep dang nhap
                } catch (Exception ex) {
                    Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("Pin Code: " + pin);
            }
        });
    }

    public static void SecurityKeyPairGenerator() {
        try {
            SecureRandom sr = new SecureRandom();
            // Thuật toán phát sinh khóa - RSA
            // Độ dài khóa 1024(bits), độ dài khóa này quyết định đến độ an toàn của khóa, càng lớn thì càng an toàn
            // Demo chỉ sử dụng 1024 bit. Nhưng theo khuyến cáo thì độ dài khóa nên tối thiểu là 2048
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
            kpg.initialize(1024, sr);

            // Khởi tạo cặp khóa
            KeyPair kp = kpg.genKeyPair();
            // PublicKey
            publicKey = kp.getPublic();
            System.out.println("publicKey: " + publicKey.getEncoded());
            // PrivateKey
            privateKey = kp.getPrivate();
            System.out.println("privateKey: " + privateKey.getEncoded());
            System.out.println("Generate key successfully");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> cbbTerminal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtPin;
    // End of variables declaration//GEN-END:variables

}
